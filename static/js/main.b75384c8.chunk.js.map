{"version":3,"sources":["../../src/store/log-context.ts","../../src/store/log-reducer.ts","../../src/hooks/useLog.ts","../../src/components/Log.tsx","../../src/utils/date.ts","../../src/index.tsx","../../src/hooks/useLogger.ts","App.tsx","index.tsx"],"names":["LogCotext","createContext","state","dispatch","action","initalState","useReducer","logReducer","Log","React","useState","showLogMenu","setShowLogMenu","activeTab","setActiveTab","logs","useMemo","log","className","styles","onClick","key","date","Intl","day","month","year","hour","minute","second","JSON","LogRect","mode","children","value","useLog","useLogger","useContext","logger","type","data","name","payload","timestamp","Date","App","useEffect","interval","setInterval","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"oPAEaA,EAAYC,wBAGtB,CACDC,MADC,GAEDC,SAAU,0BCPZ,EAAe,SAACD,EAAD,GACb,OAAQE,EAAR,MACE,IAAK,UACH,MAAO,GAAP,UAAkBA,EAAlB,UACF,IAAK,aACH,MAAO,GACT,QACE,OAAOF,ICJb,EAAe,SAACG,kBAAqB,IACnC,MAA0BC,qBAAWC,EAArC,GAEA,MAAO,CACLL,MAHF,KAIEC,SAJF,O,wFCCIK,EAAM,WACV,IAAQN,EAAUO,eAAlB,SACA,EAAsCC,oBAAtC,GAAOC,EAAP,KAAoBC,EAApB,KAEA,EAAkCF,mBAAlC,QAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAOC,mBAAQ,WACnB,OAAOd,EAAA,QAAa,mBAASe,SAAT,OACnB,CAACf,EAFJ,IAIA,OACE,yBAAKgB,UAAWC,GACbR,GACC,yBAAKO,UAAWC,GACd,yBAAKD,UAAWC,GACd,4BACED,UAAcC,EAAL,KACPN,WAAuBM,EADhB,IAGTC,QAAS,kBAAMN,EAAN,UALb,QASE,4BACEI,UAAcC,EAAL,KACPN,WAAuBM,EADhB,IAGTC,QAAS,kBAAMN,EAAN,UAbb,WAiBE,4BACEI,UAAcC,EAAL,KACPN,YAAwBM,EADjB,IAGTC,QAAS,kBAAMN,EAAN,WAtBf,UA2BGC,EAAA,KAAS,mBACR,yBAAKM,IAAKJ,8BAAiCC,UAAWC,GACpDV,4BC/Caa,EDgDCL,EADdR,UC9CL,IAAIc,KAAJ,uBAAiC,CACtCC,IADsC,UAEtCC,MAFsC,QAGtCC,KAHsC,UAItCC,KAJsC,UAKtCC,OALsC,UAMtCC,OAAQ,YANH,OAAP,ID8CYpB,MACiCQ,EAFnC,MAIER,6BAAMqB,eAAeb,EAAfa,UALA,KC7CM,IAACR,MDuDrB,4BACEJ,UAAcC,EAAL,KACPR,EAAcQ,EADP,IAGTC,QAnDgB,kBAAMR,GAAN,KAqDfD,EAAc,WA9CrB,QEJWoB,EAAU,SAAC,G,IAAEC,SAAMC,aAC9B,cAAID,EAEA,wBAAChC,EAAD,UAAoBkC,MAAOC,KACzB1B,0BADF,MADF,GAOKwB,GAGIG,ECpBE,WACb,IAAQjC,EAAakC,qBAArB,YAcA,MAAO,CAAEC,OAZT,SAAgB,G,IAAEC,SAAMC,SAAMC,SAC5BtC,EAAS,CACPoC,KADO,UAEPG,QAAS,CACPD,KADO,EAEPF,KAFO,EAGPC,KAHO,EAIPG,UAAW,IAAIC,WCMRC,G,KAdH,WACV,IAAQP,EAAWF,IAAXE,OAUR,OARAQ,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BV,EAAO,CAAEC,KAAM,OAAQC,KAAM,CAAC,eAAgBC,KAAM,aACnD,KAEH,OAAO,kBAAMQ,cAAcF,OAGtB,gCCTTG,IAASC,OACP,kBAAC,EAAD,CAASnB,KAAK,OACZ,kBAAC,EAAD,OAGFoB,SAASC,eAAe,W","file":"static/js/main.b75384c8.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const LogCotext = createContext<{\r\n  state: Log[];\r\n  dispatch: React.Dispatch<any>;\r\n}>({\r\n  state: [],\r\n  dispatch: () => null,\r\n});\r\n","export default (state: Log[], action: any): Log[] => {\r\n  switch (action.type) {\r\n    case \"ADD_LOG\":\r\n      return [...state, action.payload];\r\n    case \"CLEAR_LOGS\":\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { useReducer } from \"react\";\r\nimport logReducer from \"../store/log-reducer\";\r\n\r\nexport default (initalState: Log[] = []) => {\r\n  const [state, dispatch] = useReducer(logReducer, initalState);\r\n\r\n  return {\r\n    state,\r\n    dispatch,\r\n  };\r\n};\r\n","import React, { useMemo, useState } from \"react\";\r\nimport { LogCotext } from \"../store/log-context\";\r\nimport styles from \"../styles.module.css\";\r\nimport { formatDate } from \"../utils/date\";\r\n\r\nconst Log = () => {\r\n  const { state } = React.useContext(LogCotext);\r\n  const [showLogMenu, setShowLogMenu] = useState(false);\r\n  const toggleLogMenu = () => setShowLogMenu(!showLogMenu);\r\n  const [activeTab, setActiveTab] = useState(\"INFO\");\r\n\r\n  const logs = useMemo(() => {\r\n    return state.filter((log) => log.type === activeTab);\r\n  }, [state, activeTab]);\r\n\r\n  return (\r\n    <div className={styles.log_rect_provider}>\r\n      {showLogMenu && (\r\n        <div className={styles.log_menu}>\r\n          <div className={styles.tab_wrapper}>\r\n            <button\r\n              className={`${styles.tab} ${\r\n                activeTab === \"INFO\" ? styles.tab_active : \"\"\r\n              }`}\r\n              onClick={() => setActiveTab(\"INFO\")}\r\n            >\r\n              Info\r\n            </button>\r\n            <button\r\n              className={`${styles.tab} ${\r\n                activeTab === \"WARN\" ? styles.tab_active : \"\"\r\n              }`}\r\n              onClick={() => setActiveTab(\"WARN\")}\r\n            >\r\n              Warning\r\n            </button>\r\n            <button\r\n              className={`${styles.tab} ${\r\n                activeTab === \"ERROR\" ? styles.tab_active : \"\"\r\n              }`}\r\n              onClick={() => setActiveTab(\"ERROR\")}\r\n            >\r\n              Error\r\n            </button>\r\n          </div>\r\n          {logs.map((log) => (\r\n            <div key={log.timestamp.getMilliseconds()} className={styles.log}>\r\n              <p>\r\n                {formatDate(log.timestamp)} - {log.name}\r\n              </p>\r\n              <pre>{JSON.stringify(log.data, null, 2)}</pre>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <button\r\n        className={`${styles.logger_btn} ${\r\n          showLogMenu ? styles.fullwidth_btn : \"\"\r\n        }`}\r\n        onClick={toggleLogMenu}\r\n      >\r\n        {showLogMenu ? \"Log Rect\" : \"LR\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Log;\r\n","export const formatDate = (date: Date) => {\r\n  return new Intl.DateTimeFormat(\"en-GB\", {\r\n    day: \"numeric\",\r\n    month: \"short\",\r\n    year: \"numeric\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n  }).format(date);\r\n};\r\n","import * as React from \"react\";\nimport useLoggerHook from \"./hooks/useLogger\";\nimport useLog from \"./hooks/useLog\";\nimport { LogCotext } from \"./store/log-context\";\nimport Log from \"./components/Log\";\n\ninterface Props {\n  mode: \"DEV\" | \"PROD\";\n  children: React.ReactElement;\n}\n\nexport const LogRect = ({ mode, children }: Props) => {\n  if (mode === \"DEV\") {\n    return (\n      <LogCotext.Provider value={useLog()}>\n        <Log />\n        {children}\n      </LogCotext.Provider>\n    );\n  }\n  return children;\n};\n\nexport const useLogger = useLoggerHook;\n","import { useContext } from \"react\";\r\nimport { LogCotext } from \"../store/log-context\";\r\n\r\nexport default () => {\r\n  const { dispatch } = useContext(LogCotext);\r\n\r\n  function logger({ type, data, name }: LogAddDTO) {\r\n    dispatch({\r\n      type: \"ADD_LOG\",\r\n      payload: {\r\n        name,\r\n        type,\r\n        data,\r\n        timestamp: new Date(),\r\n      },\r\n    });\r\n  }\r\n\r\n  return { logger };\r\n};\r\n","import React, { useEffect } from \"react\";\n\nimport { useLogger } from \"log-rect\";\nimport \"log-rect/dist/index.css\";\n\nconst App = () => {\n  const { logger } = useLogger();\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      logger({ type: \"INFO\", data: [\"Hello World\"], name: \"gjshef\" });\n    }, 5 * 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  return <div></div>;\n};\n\nexport default App;\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { LogRect } from \"log-rect\";\n\nReactDOM.render(\n  <LogRect mode=\"DEV\">\n    <App />\n  </LogRect>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}